##############################################
#
#  Code for visualizing live time data analysis in a Bachelor course
#  This code uses fake data. Originally it is an online-survey
#   conducted during the lecture with the follwong questions:
#
#     Sex -       What is your sex/gender identity?   [1/2]
#                 Attention: female is 1 and male is 2 (later 0)! 
#     Age.Yr -    How old are you (in years)?	        [numeric]
#     Height.cm - Body height (in cm)	                [numeric]
#     ShoeSize -  Shoe size (European system)	        [numeric]
#     ShoePair -  How many shoe pairs do you have?	  [numeric]
#     Depress.Pt -  The influence of social media use on depression 
#         and psychological distress will become a 
#         serious health problem in the next decade.	[scale 1 to 10]
#     Fastfood.Pt - The increasing rates of breast and ovarian 
#         cancer associated with frequent fast 
#         food consumption will become a serious
#         health problem in the next decade.   	    [scale 1 to 10]
#     Healthy.Pt -  In Switzerland, global warming will 
#         foster diseases spread by mosquitoes and will 
#         become a serious health problem in the next decade.	 [scale 1 to 10]
#     Rockstar.Pt - Studying is nice but it would be more 
#                   fun to be a rock-star	                  [scale 1 to 10]
#     Healthy.Pt -  I felt very healthy when I woke up this morning   [scale 1 to 10]
#
#  Several new variables will be generated by the code:
#     Height in inch
#     Binary variablkes from the scales (below and above mean)
#
#  You can show many statistical concepts:
#  1) If you first show the distcriptive results 
#     (select about 10 variables in the first box)
#     Students will say that stat significanz will depend on the difference
#     But afterwards you show that height in cm and inch are - of course - identical.
#     (select  Height.cm in Analysis variable 1 Height.in in Analysis variable 2
#     swith to the Analysis tab and poress the plot button)
#  2) Show that you loose power, if you split a numeric variable into 2 groups
#  3) Although Mosquitoe.1st and  Depress.1st have almost the same 
#     absolute difference, the odds ratio is compoletely different
#  ...
#
#  Be aware that ShoeSize might lead to separatipon problems,
#    if the number of Students is small
#
 

library(shiny)


d <- structure(list(Sex = c(1L, 1L, 2L, 2L, 2L, 1L, 2L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 2L, 1L, 1L, 2L, 2L, 
    2L, 1L, 2L), Age.Yr = c(22L, 24L, 23L, 22L, 23L, 24L, 24L, 21L, 
    22L, 23L, 22L, 21L, 23L, 22L, 23L, 23L, 21L, 25L, 22L, 20L, 23L, 
    23L, 24L, 23L, 23L, 22L, 23L, 24L, 22L), Height.cm = c(164L, 
    175L, 165L, 180L, 178L, 168L, 170L, 169L, 173L, 170L, 166L, 160L, 
    163L, 175L, 160L, 173L, 163L, 177L, 175L, 169L, 158L, 185L, 161L, 
    162L, 165L, 175L, 178L, 160L, 179L), ShoeSize = c(38L, 40L, 41L, 
    42L, 41L, 39L, 41L, 40L, 39L, 39L, 37L, 38L, 38L, 41L, 38L, 39L, 
    39L, 51L, 39L, 37L, 37L, 43L, 36L, 36L, 41L, 42L, 44L, 39L, 41L
    ), ShoePair = c(7L, 6L, 6L, 5L, 10L, 15L, 5L, 10L, 30L, 9L, 12L, 
    5L, 20L, 15L, 10L, 20L, 8L, 2L, 10L, 15L, 8L, 3L, 30L, 7L, 6L, 
    5L, 9L, 15L, 5L), Depress.Pt = c(7L, 9L, 10L, 9L, 10L, 7L, 10L, 
    8L, 8L, 7L, 6L, 5L, 7L, 7L, 9L, 9L, 8L, 1L, 5L, 8L, 6L, 8L, 
    8L, 6L, 10L, 9L, 8L, 7L, 9L), Fastfood.Pt = c(2L, 10L, 6L, 4L, 
    7L, 3L, 6L, 7L, 4L, 10L, 3L, 9L, 4L, 5L, 9L, 7L, 5L, 10L, 5L, 
    1L, 3L, 2L, 5L, 7L, 6L, 5L, 7L, 3L, 6L), Mosquitoe.Pt = c(2L, 
    6L, 8L, 9L, 2L, 3L, 8L, 6L, 6L, 6L, 6L, 7L, 7L, 6L, 8L, 5L, 3L, 
    5L, 7L, 7L, 2L, 6L, 6L, 3L, 8L, 9L, 5L, 3L, 10L), Rockstar.Pt = c(8L, 
    1L, 4L, 3L, 10L, 10L, 6L, 2L, 1L, 8L, 4L, 10L, 3L, 2L, 8L, 2L, 
    9L, 1L, 1L, 10L, 1L, 2L, 6L, 5L, 4L, 7L, 10L, 10L, 6L), Healthy.Pt = c(7L, 
    10L, 3L, 8L, 2L, 4L, 9L, 10L, 9L, 7L, 8L, 2L, 9L, 4L, 5L, 6L, 
    9L, 10L, 7L, 5L, 9L, 10L, 4L, 8L, 3L, 7L, 2L, 4L, 9L)), 
    class = "data.frame", row.names = c(NA, -29L))



###########################
# Manage data
# Calculate a few new variables
d$Sex <- ifelse(d$Sex == 2, 0, 1)
d$Height.in <- d$Height.cm/2.54
# which one is the biiggest helaath issue?
d$Depress.1st <-as.numeric(d$Depress.Pt >= d$Fastfood.Pt & d$Depress.Pt >= d$Mosquitoe.Pt)
d$Fastfood.1st <-as.numeric(d$Fastfood.Pt > d$Depress.Pt & d$Fastfood.Pt >= d$Mosquitoe.Pt)
d$Mosquitoe.1st <- as.numeric(d$Mosquitoe.Pt > d$Depress.Pt &  d$Mosquitoe.Pt > d$Fastfood.Pt)
# transform Scales into binary (cutoff value included in variable name)
d[, paste0("Age.", trunc(mean(d$Age.Yr, na.rm=T)))]  <-
          as.numeric(d$Age.Yr >= mean(d$Age.Yr, na.rm=T))
d[, paste0("Rockstar.", trunc(mean(d$Rockstar.Pt, na.rm=T)))]  <-
          as.numeric(d$Rockstar.Pt >= mean(d$Rockstar.Pt, na.rm=T))
d[, paste0("ShoePair.", trunc(mean(d$ShoePair, na.rm=T)))]  <-
          as.numeric(d$ShoePair >= mean(d$ShoePair, na.rm=T))
cutshoe <- (max(d$ShoeSize[d$Sex==1], na.rm=T) + min(d$ShoeSize[d$Sex==0], na.rm=T))/2    
d[, paste0("ShoeSize.", trunc(cutshoe))]  <-
          as.numeric(d$ShoeSize >= trunc(cutshoe))
d[, paste0("Healthy.", trunc(mean(d$Healthy.Pt, na.rm=T)))]  <-
          as.numeric(d$Healthy.Pt >= mean(d$Healthy.Pt, na.rm=T))
d <- d[, c(1,2,15,3,11,4,18,5,17,6,12,7,13,8,14,9,16,10,19)]


###################################################
# Helper functions
niceP <- function(p.val) {
    if(is.na(p.val)) return(NA)
    if (p.val >= 0.0095)
      nP <- round(p.val, 2)
    else if (p.val < 0.001)
      nP <- "<0.001"
    else
      nP <- round(p.val, 3)
    nP
}

get.des.txt <- function(x){
   if(min(x, na.rm=T) == 0 & max(x, na.rm=T) == 1){
     Ntab <- addmargins(table(x, d$Sex))
     Ptab <- prop.table(table(x, d$Sex), 2)
     txt <- "% (N)"
     txt <- c(txt, paste0(round(Ptab[2,1]*100), "% (", Ntab[2,1], ")"))
     txt <- c(txt, paste0(round(Ptab[2,2]*100), "% (", Ntab[2,2], ")"))
     txt <- c(txt, paste0(round((Ptab[2,1]-Ptab[2,2])*100), "%-pts"))
   }
   else {
     txt <- "mean(sd)"
     txt <- c(txt, paste0(round(mean(x[d$Sex %in% 0], na.rm=T)), " (",
                   round(sd(x[d$Sex %in% 0], na.rm=T), 1), ")"))
     txt <- c(txt, paste0(round(mean(x[d$Sex %in% 1], na.rm=T)), " (",
                   round(sd(x[d$Sex %in% 1], na.rm=T), 1), ")"))
     txt <- c(txt,  round(mean(x[d$Sex %in% 0], na.rm=T)-
                          mean(x[d$Sex %in% 1], na.rm=T), 1))
   }
   txt
}

get.or.txt <- function(x){
   Ntab <- table(d$Sex, x)
   txt <- c(Ntab[1,2:1], Ntab[2,2:1])
   txt <- as.character(c(txt, round((txt[1] * txt[4]) / (txt[2] * txt[3]),1)))
   logreg <- glm(x~d$Sex, family="binomial")
   txt <- c(txt, niceP(coef(summary(logreg))[2,4]))
   txt
}


### Show a quick analysis in the R terminal to identify interesting and
###    problematic variables
for(i in 2:ncol(d)){
  x <- d[, colnames(d)[i]]
  p <- ifelse(max(x, na.rm=T) == 1,
              coef(summary(glm(x~d$Sex, "binomial")))[2,4],
              t.test(x ~ d$Sex)$p.value)
  form.name <- substr(paste(colnames(d)[i], "                  "),1,15)
  txt <- get.des.txt(x)
  print(cat(c(form.name, "\t", niceP(p)), "  ", txt[4], " ", txt[2:3], "  "))
}


#############################
# Shiny gadget
cols <- c("cornflowerblue","firebrick")

statsGadget <- function(view = c("browser", "pane", "dialog")) {

  ui = fluidPage(

    sidebarLayout(
      sidebarPanel(
        selectInput(
          "dvars",
          "Descriptive variables",
          choices = setdiff(colnames(d), c("Sex")),
          multiple = T,
          selected="Age",
          width = "90%"
        ),
        selectInput(
          "var1",
          "Analysis variable 1",
          choices = setdiff(colnames(d), c("Sex")),
          multiple = F,
          width = "80%"
        ),
        selectInput(
          "var2",
          "Analysis variable 2",
          choices = c("---", setdiff(colnames(d), c("Sex"))),
          multiple = F,
          width = "80%"
        ),
        actionButton("go", "plot", icon("refresh")),
        width=3
      ),

      mainPanel(
        tabsetPanel(type = "tabs",
          tabPanel("Descriptive summary",
                    plotOutput("describe")),
          tabPanel("Analysis",
                   plotOutput("analysis"))

        ), width = 8

      )

    )
  )

  server <- (function(input, output, session) {

    plot.des <- function(){
        c.des <- 1.5
        par(mar=c(0,0,0,0)+0.02)
        plot(NA,NA, xlim=c(0.3,5.3),
             ylim=c(0, length(input$dvars)+2),
             xlab="", xaxt="n", ylab="n")
        abline(h=length(input$dvars)+1, v=seq(2.5,4.5,1), lwd=3)
        text(seq(2.5,4.5,1),
             rep(length(input$dvars)+2,3), c("Male","Female","Diff."),
             cex=c.des, pos=4, col=c(cols[1],cols[2],"black"))
        text(c(2.6,3.6), rep(length(input$dvars)+1.5,3),
             c(paste("(N:", sum(!d$Sex),")"), paste("(N:", sum(d$Sex),")")),
             cex=c.des-0.2, pos=4)
        for(i in 1:length(input$dvars)){
           temp.txt <- get.des.txt(d[, input$dvars[i]])
           text(c(0.3,2.5,3.5,4.5), rep(length(input$dvars)-i+1,4),
             c(paste(input$dvars[i], temp.txt[1]), temp.txt[2:4]), cex=c.des, pos=4)
        }

    }

    start.des <- eventReactive(input$go, plot.des(), ignoreNULL = T)
    output$describe <- renderPlot({
      start.des()
    }, height = 600)

    plot.stat <- function(){
        c.or <- 1.8
        x <- factor(d$Sex, labels = c("M","F"))
        y <- d[, input$var1]
        par(mfcol=c(1,2), mar=c(2,2.4,2.5,0)+0.05)
        #if(input$var1 == "---")
          if(min(y, na.rm=T) == 0 & max(y, na.rm=T) == 1){
             or.txt <- get.or.txt(y)
             plot(NA,NA,ylim=c(0.5,5.5),xlim=c(0,4.5), xlab="",
                  ylab="",xaxs="i",yaxs="i",xaxt="n", yaxt="n")
             segments(c(1,1,1,1),c(1,2,3,4),c(4,4,4,4),c(1,2,3,4), lwd=2)
             segments(c(1,2,3,4),c(1,1,1,1),c(1,2,3,4),c(4,4,4,4), lwd=2)
             text(2,4.6, input$var1, cex=c.or)
             text(c(1.5,2.5,3.5),rep(4.2,3), c("Yes","No","Sum"), cex=c.or)
             text(c(0.5,0.5,0.5),c(1.5,2.5,3.5), c("Sum","Female","Male"), cex=c.or)
             text(rep(1.5,3),c(1.6,2.6,3.6), c(sum(y, na.rm=T),
                     or.txt[3],or.txt[1]), cex=c.or)
             text(rep(2.5,3),c(1.6,2.6,3.6), c(sum(!y, na.rm=T),
                     or.txt[4],or.txt[2]),cex=c.or)
             text(rep(3.5,3),c(1.6,2.6,3.6), rev(addmargins(table(x))), cex=c.or)
             mtext(paste0("Odds ratio (OR): ", or.txt[5], "   P: ", or.txt[6]),
                   side=3, line=0.2, cex=c.or)
         }
        else{
          boxplot(y ~ x, col=c(cols[1],cols[2]), notch = F, at =c(1,2),
               boxlwd = 4, cex.axis = 1.8, whisklty = 1, whisklwd = 4, staplelwd = 4)
          tt <- t.test(y ~ x)
          mtext(c("Mean:", round(as.numeric(tt$estimate)),
                  paste("dif:", round(diff(as.numeric(tt$estimate)),1)),
                  paste("P:", niceP(tt$p.value))),
               side=3, line=0.2, cex=1.8, at = c(0.6,0.95,1.2,1.65,2.3),
               col=c("black",cols[1],cols[2],"black","black")) #, adj=0)
        }
        if(input$var2 == "---") plot(0,type='n',axes=FALSE,ann=FALSE)
        else {
          y <- d[, input$var2]
           if(min(y, na.rm=T) == 0 & max(y, na.rm=T) == 1){
             or.txt <- get.or.txt(y)
             plot(NA,NA,ylim=c(0.5,5.5),xlim=c(0,4.5), xlab="",
                  ylab="",xaxs="i",yaxs="i",xaxt="n", yaxt="n")
             segments(c(1,1,1,1),c(1,2,3,4),c(4,4,4,4),c(1,2,3,4), lwd=2)
             segments(c(1,2,3,4),c(1,1,1,1),c(1,2,3,4),c(4,4,4,4), lwd=2)
             text(2,4.6, input$var2, cex=c.or)
             text(c(1.5,2.5,3.5),rep(4.2,3), c("Yes","No","Sum"), cex=c.or)
             text(c(0.5,0.5,0.5),c(1.5,2.5,3.5), c("Sum","Female","Male"), cex=c.or)
             text(rep(1.5,3),c(1.6,2.6,3.6), c(sum(d$Sex, na.rm=T),
                     or.txt[3],or.txt[1]), cex=c.or)
             text(rep(2.5,3),c(1.6,2.6,3.6), c(sum(!d$Sex, na.rm=T),
                     or.txt[4],or.txt[2]),cex=c.or)
             text(rep(3.5,3),c(1.6,2.6,3.6), rev(addmargins(table(x))), cex=c.or)
             mtext(paste0("Odds ratio (OR): ", or.txt[5], "   P: ", or.txt[6]),
                   side=3, line=0.2, cex=c.or)
         }
        else{
          boxplot(y ~ x, col=c(cols[1],cols[2]), notch = F, at =c(1,2),
               boxlwd = 4, cex.axis = 1.8, whisklty = 1, whisklwd = 4, staplelwd = 4)
          tt <- t.test(y ~ x)
          mtext(c("Mean:", round(as.numeric(tt$estimate)),
                  paste("dif:", round(diff(as.numeric(tt$estimate)),1)),
                  paste("P:", niceP(tt$p.value))),
               side=3, line=0.2, cex=1.8, at = c(0.6,0.95,1.2,1.65,2.3),
               col=c("black",cols[1],cols[2],"black","black")) #, adj=0)
        }
      }

    }

    start.stat <- eventReactive(input$go, plot.stat(), ignoreNULL = T)
    output$analysis <- renderPlot({
      start.stat()
    }, height = 600)

  })

  view <- match.arg(view)
  if(view == "browser") runGadget(ui, server, viewer = browserViewer())
  if(view == "dialog") runGadget(ui, server, viewer = dialogViewer("Epi", width = 1600, height = 800))
  if(view == "pane") runGadget(ui, server, viewer = paneViewer())

}

statsGadget(view="browser")
