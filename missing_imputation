# Install and load shiny package
if(!"shiny" %in% installed.packages()[, "Package"]){
      install.packages("shiny")
}
if(is.null(sessionInfo()$otherPkgs$shiny)){
     library(shiny)
}

# Set of ask if default is TRUE (some imputation packages change the value)
if(getOption("device.ask.default")) options(device.ask.default = F)

Nsim <- 50 
colimp <- "cornflowerblue"
coldif <- "firebrick"

genData <- function(mech, Nmis, imp){
      n <- 100
      d <- data.frame(X=runif(n)+rnorm(n))
      d$Y <- runif(n)*3 + d$X 
      d$Ym <- d$Y
      if(mech == "1") d$Ym[sample(1:n, Nmis)] <- NA
      if(mech == "2") d$Ym[sample(1:n, Nmis, prob=d$X-min(d$X))] <- NA       
      if(mech == "3") d$Ym[sample(1:n, Nmis, prob=(d$Y-min(d$Y))*2)] <- NA
      d$Yi <- d$Ym
      if(imp == "2") d$Yi[is.na(d$Ym)] <- mean(d$Ym, na.rm=T)
      if(imp == "3"){
          implm <- lm(Ym ~ X, data=d)
          #summary(implm)
          pred <- predict(implm, d)
          d$Yi[is.na(d$Ym)] <- pred[is.na(d$Ym)]
      }
      if(imp == "4"){
          implm <- lm(Ym ~ X, data=d)
          pred <- predict(implm, d)
          rse <- summary(implm)$sigma
          pred.rand <- rnorm(100, mean=pred, sd=rse)
          d$Yi[is.na(d$Ym)] <- pred.rand[is.na(d$Ym)]
      }
      return(d)
}      

calcRes <- function(d){
      res <- rep(NA, 10)
      res[1] <- mean(d$Y, na.rm=T)
      res[2] <- mean(d$Yi, na.rm=T)
      res[3] <- sd(d$Y, na.rm=T)
      res[4] <- sd(d$Yi, na.rm=T)
      lmY <- lm(Y~X, data=d)
      lmYi <- lm(Yi~X, data=d)
      res[5] <- coef(lmY)[2]
      res[6] <- coef(lmYi)[2]
      res[7:8] <- confint(lmY)[2,]
      res[9:10] <- confint(lmYi)[2,]
      return(res)
}     



# shiny app
impute <- shinyApp(
  ui = (fluidPage(
    
    sidebarLayout(
      sidebarPanel(
        
        p("Missing mechanisms and imputation.",
          "1 predictor (X) and 1 Outcome (Y)."),
        selectInput("prop",
                    "Proportion missing",
                    c("5%" = 5, "10%" = 10, "20%" = 20, "40%" = 40)),
        selectInput("mech",
                    "Missing mechanism",
                    c("MCAR (random)" = 1, 
                      "MAR (depends on X)" = 2,
                      "MNAR (depends on Y)" = 3)),
        selectInput("imp",
                    "Imputation meachnisem",
                    c("No (available case)" = 1, 
                    "Mean imputation" = 2,
                    "Regression imputation" = 3,
                    "Random regression imp." = 4)),
        hr(),
        actionButton("go", "run", icon("arrow-alt-circle-right")),
        actionButton("sim", paste0("run ",Nsim,"x"), 
                icon("arrow-alt-circle-right")),width=2,
      ),           
      mainPanel(
        plotOutput("mainPlot"),
      )
    )
  )),
  
  server <- (function(input, output, session) {
    
    newPlot <- function(loops = 1){

      d <- genData(mech = input$mech, Nmis = as.numeric(input$prop), imp = input$imp)
      #print(d)            
      par(mar=c(4,4,0,0)+0.3)
      layout(matrix(c(1,1,2,2,1,1,3,3), nrow=2, byrow=T))
      plot(d$X, d$Y, col="red", cex=4, lwd=2, xlab="X", ylab="Y")
      points(d$X, d$Ym, cex=4, lwd=2)
      abline(lm(Y~X, data=d), col="black", lty=1, lwd=4)
      abline(lm(Yi~X, data=d), col=colimp, lty=2, lwd=5)
      if(input$imp %in% c("2","3","4")) points(d$X[is.na(d$Ym)], 
                                           d$Yi[is.na(d$Ym)], cex=4, lwd=4, col=colimp)
      plot(density(d$Yi[!is.na(d$Yi)], bw=0.2), col=colimp, lwd=3, main="",
          xlab="")
      mtext("Distribution of Y (black full, blue imputed)", side=1, line=1, cex=1.5)
      lines(density(d$Y, bw=0.2), col="black", lwd=3)   
      
      res <- calcRes(d)
      
      if(loops > 1){    
           
           dM <- replicate(loops-1, genData(mech = input$mech, 
                  Nmis = as.numeric(input$prop), imp = input$imp), simplify=F)
           res <- rowMeans(cbind(sapply(dM, calcRes),res))  

      }  
      
      plot(NA,NA,xlim=0:1,ylim=0:1, xaxt="n",yaxt="n")
      mtext(c("Full",ifelse(input$imp=="1","Av. Case","Imputed"), "%-diff"),
            line=-4, cex=2, at=c(0.45, 0.65, 0.9), col=c("black",colimp,coldif))      
      mtext(c("Mean Y", round(res[1],2), round(res[2],2), round(res[2]/res[1]*100-100)),
            line=-8,cex=2,at=c(0.2,0.45,0.65,0.9),col=c("black","black",colimp, coldif))
      mtext(c("SD Y", round(res[3],2), round(res[4],2),round(res[4]/res[3]*100-100)),
            line=-13,cex=2,at=c(0.2,0.45,0.65,0.9),col=c("black","black",colimp, coldif))
      mtext(c("Coef Y~X", round(res[5],2), round(res[6],2),round(res[6]/res[5]*100-100)),
           line=-18,cex=2,at=c(0.2,0.45,0.65,0.9),col=c("black","black",colimp, coldif))
      mtext(c("95% CI Y~X", round(res[7:8],2),
               round(res[9:10],2)),
            line=-23, cex=1.6, at=c(0.14, 0.4,0.5, 0.6, 0.7), 
            col=c("black","black","black",colimp,colimp))   
      mtext(c("Width CI", round(diff(res[7:8]),2),
               round(diff(res[9:10]),2), round(diff(res[9:10])/diff(res[7:8])*100-100)),
            line=-28,cex=2,at=c(0.2,0.45,0.65,0.9),col=c("black","black",colimp, coldif))
      if(loops > 1) mtext(paste("Mean of", loops,"simulations"), 
                          side=1, line=-1.2, col="red", cex=1)                           
    }


    observeEvent(input$go,{
          output$mainPlot <- renderPlot({
             newPlot()
          }, height = 700)
    })
    observeEvent(input$sim,{
          output$mainPlot <- renderPlot({
             newPlot(loops = Nsim)
          }, height = 700)
    })
  })
  
)


runApp(impute, launch.browser=T)
